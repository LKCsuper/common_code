#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <stdbool.h>

#include "base.h"

#include "zayk_hal.h"
#include "SC12api.h"
#include "soc_dev.h"

/////////////////////////////////////////////////////////////////
int zayk_hal_rsa_pubkey_operation(void *phsess, RSArefPublicKey *pucPublicKey, unsigned char *pucDataInput,
                                  unsigned int uiInputLength, unsigned char *pucDataOutput,
                                  unsigned int *puiOutputLength)
{
    int ret;
    uint32_t offset;
    cap_rsa_ctx_t ctx;

    if ((pucPublicKey->bits != 1024) && (pucPublicKey->bits != 2048)) {
        return SDR_INARGERR;
    }

    cap_dev_handle_t *hdev = ((struct rsp_dev_session_handle *)phsess)->device_handle;

    memset(&ctx, 0, sizeof(cap_rsa_ctx_t));

    offset = (RSAref_MAX_BITS/8) - pucPublicKey->bits/8;
    ctx.bits = pucPublicKey->bits;
    ctx.pubkey.bits = pucPublicKey->bits;
    ctx.hdev = hdev;
    ctx.key_index = 0;
    ctx.key_type = CAP_USK_RSA;
    ctx.sess.mode = CAP_SYNC_MODE;
    ctx.crt = 1; // 是否crt模式，分别测试下普通模式和CRT模式性能

    memcpy(ctx.pubkey.m, pucPublicKey->m + offset, pucPublicKey->bits/8);
    memcpy(ctx.pubkey.e, pucPublicKey->e + offset, pucPublicKey->bits/8);

    while ((ret = cap_rsa_pubkey_op(&ctx, pucDataInput, uiInputLength, pucDataOutput, puiOutputLength)) == CAP_RET_BUSY) {
        usleep(1);
    }
    if (ret) {
        return ret;
    }

    return 0;
}

int zayk_hal_rsa_prikey_operation(void *phsess, RSArefPrivateKey *pucPrivateKey, unsigned char *pucDataInput,
                                  unsigned int uiInputLength, unsigned char *pucDataOutput,
                                  unsigned int *puiOutputLength)
{
    int ret;
    uint32_t offset;
    cap_rsa_ctx_t ctx;

    if ((pucPrivateKey->bits != 1024) && (pucPrivateKey->bits != 2048)) {
        return SDR_INARGERR;
    }

    cap_dev_handle_t *hdev = ((struct rsp_dev_session_handle *)phsess)->device_handle;

    memset(&ctx, 0, sizeof(cap_rsa_ctx_t));

    offset = (RSAref_MAX_BITS/8) - pucPrivateKey->bits/8;
    ctx.bits = pucPrivateKey->bits;
    ctx.hdev = hdev;
    ctx.key_index = 0;
    ctx.key_type = CAP_USK_RSA;
    ctx.sess.mode = CAP_SYNC_MODE;
    ctx.crt = 1; // 是否crt模式，分别测试下普通模式和CRT模式性能

    memcpy(&ctx.prikey, pucPrivateKey, sizeof(RSArefPrivateKey));
    ctx.prikey.bits = pucPrivateKey->bits;
    memcpy(ctx.prikey.n, pucPrivateKey->m + offset, pucPrivateKey->bits/8);
    memcpy(ctx.prikey.e, pucPrivateKey->e + offset, pucPrivateKey->bits/8);
    memcpy(ctx.prikey.d, pucPrivateKey->d + offset, pucPrivateKey->bits/8);
    memcpy(ctx.prikey.p, pucPrivateKey->prime[0] + offset/2, pucPrivateKey->bits/8/2);
    memcpy(ctx.prikey.q, pucPrivateKey->prime[1] + offset/2, pucPrivateKey->bits/8/2);
    memcpy(ctx.prikey.dp, pucPrivateKey->pexp[0] + offset/2, pucPrivateKey->bits/8/2);
    memcpy(ctx.prikey.dq, pucPrivateKey->pexp[1] + offset/2, pucPrivateKey->bits/8/2);
    memcpy(ctx.prikey.qinv, pucPrivateKey->coef + offset/2, pucPrivateKey->bits/8/2);

    while ((ret = cap_rsa_prikey_op(&ctx, pucDataInput, uiInputLength, pucDataOutput, puiOutputLength)) == CAP_RET_BUSY) {
        usleep(1);
    }
    if (ret) {
        return ret;
    }    

    return 0;
}
