#ifndef __IOCTL_CMDS_H__
#define __IOCTL_CMDS_H__

#include <stdint.h>

#define S11_RC_OBCMD_SIZE    (1024 * 1024 * 2)
#define S10_RC_OBCMD_BASE    (0x00000000)
#define S10_RC_OBDAT_BASE    (S10_RC_OBCMD_BASE + S11_RC_OBCMD_SIZE)

typedef enum {
    IOCTL_SHARED_DATA_TYPE_OBOUND_CMD = 0,
    IOCTL_SHARED_DATA_TYPE_OBOUND_DAT,
    IOCTL_SHARED_DATA_TYPE_KRAM,
    IOCTL_SHARED_DATA_TYPE_BAR0,
    IOCTL_SHARED_DATA_TYPE_BAR1,
}ioctl_shared_data_enum;

typedef enum {
    IOCTL_SHARED_DATA_DO_TYPE_GET = 0,
    IOCTL_SHARED_DATA_DO_TYPE_SET,
}ioctl_shared_data_do_type_enum;
/************************************************************************************************/
#define IOCTL_MAGIC  (0x95)

typedef struct ioctl_zaykcomm_st_ {
    uint32_t timeout;
    uint32_t len;
    uint8_t data[8192 + 1024];
}ioctl_opera_data;
#define ZAYKCOMM_OPERA (400)
#define IOCTL_ZAYKCOMM_OPERA    _IOWR(IOCTL_MAGIC, ZAYKCOMM_OPERA, ioctl_opera_data)

typedef struct ioctl_shared_data_
{
    uint64_t offset;
    uint64_t data_len;
    uint64_t data;
    uint64_t type;
}ioctl_shared_data;
#define ZAYKCOMM_SHARE_DATA (401)
#define IOCTL_ZAYKCOMM_SHARED_DATA  _IOWR(IOCTL_MAGIC, ZAYKCOMM_SHARE_DATA, ioctl_shared_data)

#define DRIVER_VERSION_CODE(v1,v2,v3) ((v1<<16)+(v2<<8)+v3)
#define IOCTL_DRIVER_VERSION_MAGIC (0x11223344)

typedef struct ioctl_driver_version_
{
    uint32_t magic;
    uint32_t version;
}ioctl_driver_version;
#define ZAYKCOMM_DRIVER_VERSION (402)
#define IOCTL_ZAYKCOMM_GET_DRIVER_VERSION _IOWR(IOCTL_MAGIC, ZAYKCOMM_DRIVER_VERSION, ioctl_driver_version)
/************************************************************************************************/

#endif
